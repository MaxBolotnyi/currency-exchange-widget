{"version":3,"sources":["api/index.ts","reducers/accounts.ts","reducers/index.ts","store/index.ts","utils/currencies.ts","components/AccountSelect/index.tsx","components/CurrencyInput/index.tsx","components/TopToast/styles.ts","components/TopToast/index.tsx","components/Card/styles.ts","components/Card/index.tsx","components/Button/styles.ts","components/Button/index.tsx","containers/Converter/Layout/styles.ts","containers/Converter/Layout/index.tsx","mockData/accounts.ts","hooks/useConversionForm/index.ts","actions/accounts/index.ts","hooks/useAccounts/index.ts","containers/Converter/index.tsx","App.tsx","theme/index.ts","reportWebVitals.ts","index.tsx"],"names":["conversionApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getConversionRates","query","amount","from","to","transformResponse","response","rate","info","result","useGetConversionRatesQuery","accountsSlice","createSlice","name","initialState","accounts","reducers","updateAccountBalance","state","action","payload","id","balance","newBalance","setAccounts","acc","removeAccount","clearAccounts","actions","rootReducer","combineReducers","reducer","store","configureStore","middleware","getDefaultMiddleware","concat","useAppDispatch","useDispatch","stripNonDigits","string","replace","getCurrencySymbol","currency","Intl","NumberFormat","style","format","toCurrencyString","precision","reservedVal","String","hasDot","includes","split","decimal","fractional","length","slice","converted","parsed","parseFloat","maximumFractionDigits","minimumFractionDigits","getLocalString","postfix","appendPrecision","_decimal","defaultPrecision","repeat","padEnd","AccountSelect","React","memo","label","props","TextField","variant","select","map","account","accountBalance","toString","accountLabel","MenuItem","value","CurrencyInput","onChange","className","useState","inputVal","setInputVal","isFocused","setIsFocused","onFocus","useCallback","useEffect","newVal","reservedValue","onBlur","withPrecision","FormControl","placeholder","event","target","digits","Number","toFixed","originalEvent","InputLabelProps","shrink","inputProps","textAlign","InputProps","startAdornment","InputAdornment","data-testid","position","useStyles","makeStyles","root","visibility","width","height","alignItems","justifyContent","top","left","transition","open","TopToast","children","onDelayedClose","delay","classes","timeout","setTimeout","clearTimeout","Alert","theme","createStyles","container","borderRadius","boxShadow","shadows","backgroundColor","palette","background","paper","display","flexDirection","padding","overflow","Card","pink","orange","disabled","grey","color","common","white","MyButton","Button","marginRight","marginTop","row","flex","rateInfo","margin","ConverterLayout","showToast","onToastClose","src","dest","isValid","exchangeRate","onSumbit","outOfBound","severity","accountId","onAccountChange","error","helperText","onValChange","FormHelperText","onClick","useConversionForm","useApiHook","dispatch","sourceAcc","setSourceAcc","destAcc","setDestAcc","sourceAmount","setSourceAmount","destAmount","setDestAmount","liveUpdateField","setliveUpdateField","submit","setSubmit","getAccountById","skip","pollingInterval","data","isError","isSuccess","refetch","precondition","source","destination","getState","a","sourceAccount","destAccount","console","newSourceAmount","newDestAmount","makeTransaction","every","item","setSrcAmount","onSubmit","acccountSelector","useAccounts","useSelector","mockAccountsData","useMemo","Object","values","list","getById","Converter","showSuccessToast","setShowSuccessToast","hideToast","App","prefersDarkMode","useMediaQuery","createMuiTheme","type","primary","main","overrides","MuiOutlinedInput","borderColor","MuiSelect","createTheme","ThemeProvider","CssBaseline","default","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a118c71.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport type { TRateRequestParams } from './types';\n\n\n// Define a service using a base URL and expected endpoints\nexport const conversionApi = createApi({\n    reducerPath: 'conversion',\n    baseQuery: fetchBaseQuery({ baseUrl: 'https://api.exchangerate.host/' }),\n    endpoints: (builder) => ({\n        getConversionRates: builder.query<any, TRateRequestParams>({\n            query: ({ amount, from, to }: TRateRequestParams) => `convert?from=${from}&to=${to}&amount=${amount}`,\n            transformResponse: (response: any) => ({\n                rate: response?.info?.rate,\n                amount: response?.result\n            })\n        })\n    }),\n});\n\n// auto-generated based on the defined endpoints\nexport const { useGetConversionRatesQuery } = conversionApi;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { TAccount, TAccountsState } from './types';\n\nconst initialState: TAccountsState = {\n    accounts: {}\n};\n\nexport const accountsSlice = createSlice({\n    name: 'acoounts',\n    initialState,\n    reducers: {\n        updateAccountBalance: (state, action: PayloadAction<{ id: TAccount['id'], newBalance: TAccount['balance'] }>) => {\n            state.accounts[action.payload.id].balance = action.payload.newBalance;\n        },\n        setAccounts: (state, action: PayloadAction<Array<TAccount>>) => {\n            for (const acc of action.payload) {\n                state.accounts[acc.id] = acc;\n            }\n        },\n        removeAccount: (state, action: PayloadAction<TAccount['id']>) => {\n            delete state.accounts[action.payload]\n        },\n        clearAccounts: state => {\n            state.accounts = {};\n        }\n    }\n});\n\nexport const {\n    updateAccountBalance,\n    setAccounts,\n    removeAccount,\n    clearAccounts\n} = accountsSlice.actions;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { conversionApi } from '../api';\nimport { accountsSlice } from '../reducers/accounts';\n\nexport const rootReducer = combineReducers({\n    accounts: accountsSlice.reducer,\n    [conversionApi.reducerPath]: conversionApi.reducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\n\nimport { rootReducer } from '../reducers';\nimport { conversionApi } from '../api';\n\n\nconst store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware().concat(conversionApi.middleware),\n});\n\nexport type TStore = typeof store;\nexport type TRootState = ReturnType<typeof store.getState>;\nexport type TAppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<TAppDispatch>();\nexport default store;\n","export type TCurrencyStringConfig = {\n    amount: string | number,\n    precision?: number,\n    currency?: string\n};\n\nexport const getLocalString = ({\n    amount,\n    precision = 2,\n    currency\n}: TCurrencyStringConfig) => {\n    const parsed = parseFloat(amount as string);\n\n    if (!parsed) {\n        return '';\n    }\n\n    return new Intl.NumberFormat('en-US', {\n        style: currency ? 'currency' : 'decimal',\n        currency,\n        maximumFractionDigits: precision,\n        minimumFractionDigits: precision\n    }).format(parsed);\n};\n\nexport const stripNonDigits = (string: string) => {\n    return string.replace(/[^0-9.]/g, '');\n};\n\nexport const getCurrencySymbol = (currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency\n    }).format(1)[0];\n};\n\nexport const toCurrencyString = ({\n    amount,\n    precision = 2,\n    currency\n}: TCurrencyStringConfig) => {\n    let reservedVal: string = stripNonDigits(String(amount));\n\n    if (!reservedVal) {\n        return '';\n    }\n\n    const hasDot = reservedVal.includes('.');\n    let [decimal, fractional = ''] = reservedVal.split('.');\n\n    if (fractional && fractional.length > precision) {\n        fractional = fractional.slice(0, precision);\n        reservedVal = `${decimal}.${fractional.slice(0, precision)}`\n    }\n\n    const converted = getLocalString({\n        amount: reservedVal,\n        precision: fractional.length,\n        currency\n    });\n\n    const postfix = (hasDot && !fractional) ? '.' : '';\n    return `${converted}${postfix}`;\n};\n\nexport const appendPrecision = (amount: string, precision: number = 2) => {\n    if(!parseFloat(amount)) {\n        return amount;\n    }\n    const [_decimal, fractional] = amount.split('.');\n    const decimal = _decimal || '0';\n    const defaultPrecision = '0'.repeat(precision);\n    return fractional ? `${decimal}.${fractional.padEnd(precision, '0')}` : `${decimal}.${defaultPrecision}`;\n};\n","import React from 'react';\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\n\nimport { toCurrencyString } from '../../utils/currencies';\n\nimport type { TAccountSelectProps } from './types';\n\nconst AccountSelect = React.memo(({\n    accounts = [],\n    label,\n    ...props\n}: TAccountSelectProps) => {\n    return (\n        <TextField\n            {...props}\n            label={label}\n            variant=\"outlined\"\n            select\n        >\n            {\n                accounts.map(account => {\n                    const accountBalance = toCurrencyString({\n                        amount: account.balance.toString(),\n                        precision: 2,\n                        currency: account.currency\n                    })\n                    const accountLabel = `${account.name} - ${accountBalance}`;\n                    return (\n                        <MenuItem key={account.id} value={account.id}>{accountLabel}</MenuItem>\n                    );\n                })\n            }\n        </TextField>\n    );\n});\n\nexport default AccountSelect;\n","import React, { ChangeEvent } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\n\nimport {\n    toCurrencyString,\n    getCurrencySymbol,\n    appendPrecision,\n    stripNonDigits\n} from '../../utils/currencies';\n\nimport type { TCurrencyInputProps } from './types';\n\nconst DEFAULT_VALUE = '';\n\nconst CurrencyInput = React.memo(({\n    label,\n    value,\n    currency = 'USD',\n    onChange,\n    className,\n    precision = 2,\n    ...props\n}: TCurrencyInputProps) => {\n    const [inputVal, setInputVal] = React.useState(DEFAULT_VALUE);\n    const [isFocused, setIsFocused] = React.useState(false);\n\n    const onFocus = React.useCallback(() => setIsFocused(true), []);\n\n    React.useEffect(() => {\n        if (isFocused) {\n            return;\n        }\n        const newVal = String(value) ? String(value) : DEFAULT_VALUE;\n        let reservedValue = toCurrencyString({\n            amount: newVal,\n            precision\n        });\n        if (!isFocused) {\n            reservedValue = appendPrecision(reservedValue, precision);\n        }\n        setInputVal(reservedValue);\n    }, [value, precision, isFocused]);\n\n    const _onChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const value: string = event.target.value;\n        const digits = stripNonDigits(value);\n        const converted = toCurrencyString({\n            amount: value,\n            precision\n        });\n        setInputVal(converted);\n        !!onChange && onChange({\n            value: Number(digits).toFixed(precision),\n            originalEvent: event\n        });\n    };\n\n    const onBlur = React.useCallback(() => {\n        if (!inputVal) {\n            return;\n        }\n        const withPrecision = appendPrecision(inputVal);\n        setInputVal(withPrecision);\n        setIsFocused(false);\n    }, [inputVal]);\n\n    return (\n        <FormControl className={className} variant=\"outlined\" >\n            <TextField\n                {...props}\n                label={label}\n                value={inputVal}\n                placeholder=\"0.00\"\n                onChange={_onChange}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                InputLabelProps={{\n                    shrink: true\n                }}\n                inputProps={{ style: { textAlign: 'right' } }}\n                InputProps={{\n                    startAdornment: <InputAdornment data-testid=\"currency-sign\" position=\"start\">{getCurrencySymbol(currency)}</InputAdornment>,\n                }}\n                variant=\"outlined\"\n            />\n        </FormControl >\n    );\n});\n\nexport default CurrencyInput;\n","import { makeStyles } from '@material-ui/core';\n\n\nexport const useStyles = makeStyles({\n    root: {\n        visibility: 'hidden',\n        width: 150,\n        height: 30,\n        alignItems: 'center',\n        justifyContent: 'center',\n        position: 'absolute',\n        top: -100,\n        left: 'calc(50% - 75px)',\n        transition: 'top 0.3s linear'\n    },\n    open: {\n        top: 10,\n        visibility: 'visible'\n    }\n});\n","import React from 'react';\nimport Alert from '@material-ui/lab/Alert';\n\nimport { useStyles } from './styles';\n\nimport type { TTopToastProps } from './types';\n\nconst TopToast = React.memo(({\n    children,\n    open = false,\n    onDelayedClose,\n    delay = 1600,\n    ...props\n}: TTopToastProps) => {\n    const classes = useStyles();\n\n    React.useEffect(() => {\n        let timeout: ReturnType<typeof setTimeout>;\n        if (open) {\n            timeout = setTimeout(() => {\n                !!onDelayedClose && onDelayedClose();\n            }, delay);\n        }\n        return () => {\n            if (timeout) {\n                clearTimeout(timeout)\n            }\n        };\n    }, [open, delay, onDelayedClose]);\n\n    return (\n        <Alert\n            {...props}\n            className={`${classes.root} ${open ? classes.open : ''}`}\n            variant=\"filled\"\n        >\n            {children}\n        </Alert>\n    );\n});\n\nexport default TopToast;\n","import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\n    container: {\n        borderRadius: 20,\n        boxShadow: theme.shadows[1],\n        width: 350,\n        height: 400,\n        backgroundColor: `${theme.palette.background.paper}`,\n        display: 'flex',\n        position: 'relative',\n        flexDirection: 'column',\n        justifyContent: 'space-evenly',\n        alignItems: 'strech',\n        padding: '20px',\n        overflow: 'hidden'\n    }\n}));\n","import React from 'react';\nimport { useStyles } from './styles';\n\nconst Card: React.FunctionComponent = React.memo(({ children }) => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.container}>\n            {children}\n        </div >\n    );\n});\n\nexport default Card;","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport pink from '@material-ui/core/colors/pink';\nimport orange from '@material-ui/core/colors/orange';\nimport { grey } from '@material-ui/core/colors';\n\n\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\n    root: {\n        background: `linear-gradient(45deg, ${pink[300]} 30%, ${orange[300]} 90%)`,\n        borderRadius: 20,\n        height: 40,\n        padding: '0 30px'\n    },\n    disabled: {\n        background: `linear-gradient(45deg, ${grey[700]} 30%, ${grey[500]} 90%)`\n    },\n    label: {\n        color: theme.palette.common.white\n    }\n}));\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { useStyles } from './styles';\nimport type { TButtonProps } from './types';\n\nconst MyButton = React.memo(({\n    children,\n    ...props\n}: TButtonProps) => {\n    const classes = useStyles();\n    return (\n        <Button\n            {...props}\n            classes={{\n                root: classes.root,\n                disabled: classes.disabled,\n                label: classes.label\n            }}\n        >\n            { children}\n        </Button >\n    );\n});\n\nexport default MyButton;\n","import { makeStyles } from '@material-ui/core';\n\nexport const useStyles = makeStyles({\n    marginRight: {\n        marginRight: 20\n    },\n    select: {\n        marginTop: 30,\n    },\n    row: {\n        marginTop: 30,\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    container: {\n        display: 'flex',\n        flex: 1,\n        flexDirection: 'column',\n        justifyContent: 'flex-start'\n    },\n    rateInfo: {\n        margin: 20,\n        textAlign: 'center'\n    }\n});\n","import React from 'react';\n\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nimport AccountSelect from '../../../components/AccountSelect';\nimport CurrencyInput from '../../../components/CurrencyInput';\nimport TopToast from '../../../components/TopToast';\nimport Card from '../../../components/Card';\nimport Button from '../../../components/Button';\n\nimport { useStyles } from './styles';\nimport { getCurrencySymbol } from '../../../utils/currencies';\n\nimport type { TConverterLayoutProps } from './types';\n\n\nconst ConverterLayout = React.memo(({\n    showToast = false,\n    onToastClose,\n    accounts = [],\n    src,\n    dest,\n    isValid = false,\n    exchangeRate,\n    onSumbit\n}: TConverterLayoutProps) => {\n    const classes = useStyles();\n\n    const outOfBound = +src.balance < +src.amount;\n    return (\n        <Card>\n            <TopToast\n                severity=\"success\"\n                open={showToast}\n                onDelayedClose={onToastClose}\n            >\n                Done!\n        </TopToast>\n            <div className={classes.container}>\n                <AccountSelect\n                    id=\"sourceAcc\"\n                    name=\"sourceAcc\"\n                    accounts={accounts}\n                    value={src.accountId}\n                    className={classes.select}\n                    label=\"Source Account\"\n                    onChange={src.onAccountChange}\n                />\n                <AccountSelect\n                    id=\"destAcc\"\n                    name=\"destAcc\"\n                    value={dest.accountId}\n                    accounts={accounts}\n                    className={classes.select}\n                    label=\"Destination Account\"\n                    onChange={dest.onAccountChange}\n                />\n                <div className={classes.row}>\n                    <CurrencyInput\n                        id=\"srcAmount\"\n                        name=\"srcAmount\"\n                        error={outOfBound}\n                        helperText={outOfBound && 'Not enough money'}\n                        className={classes.marginRight}\n                        currency={src.currency}\n                        value={src.amount}\n                        onChange={src.onValChange}\n                    />\n                    <CurrencyInput\n                        id=\"destAmount\"\n                        name=\"destAmount\"\n                        currency={dest.currency}\n                        value={dest.amount}\n                        onChange={dest.onValChange}\n                    />\n                </div>\n            </div>\n            {\n                !outOfBound\n                && !!src.accountId\n                && !!dest.accountId\n                && !!src.currency\n                && !!dest.currency\n                && !!src.amount\n                && !!dest.amount\n                && src.currency !== dest.currency\n                && (\n                    <FormHelperText className={classes.rateInfo}>\n                        {!exchangeRate ? `Loading...` : `Rate: ${getCurrencySymbol(src.currency)}1 = ${getCurrencySymbol(dest.currency)}${exchangeRate}`}\n                    </FormHelperText>\n                )}\n            <Button\n                disabled={!isValid}\n                onClick={onSumbit}>\n                Exchange\n        </Button>\n        </Card >\n    )\n});\n\nexport default ConverterLayout;\n","import type { TAccount } from '../reducers/types';\n\nconst accounts: TAccount[] = [\n    {\n        id: 'account-1',\n        name: 'Dollars Account',\n        currency: 'USD',\n        balance: 30000\n    },\n    {\n        id: 'account-2',\n        name: 'Euros Account',\n        currency: 'EUR',\n        balance: 25000\n    },\n    {\n        id: 'account-3',\n        name: 'Pounds Account',\n        currency: 'GBP',\n        balance: 13000\n    }\n];\n\nexport default accounts;\n","import React from 'react';\nimport { useAppDispatch } from '../../store';\nimport { useGetConversionRatesQuery } from '../../api';\nimport { makeTransaction } from '../../actions/accounts';\n\nimport type { TAccountsState } from '../../reducers/types';\n\nconst useConversionForm = ({\n    accounts,\n    useApiHook\n}: {\n    accounts: TAccountsState['accounts'],\n    useApiHook: typeof useGetConversionRatesQuery\n}) => {\n    const dispatch = useAppDispatch();\n    const [sourceAcc, setSourceAcc] = React.useState('');\n    const [destAcc, setDestAcc] = React.useState('');\n    const [sourceAmount, setSourceAmount] = React.useState<string>('');\n    const [destAmount, setDestAmount] = React.useState<string>('');\n    const [liveUpdateField, setliveUpdateField] = React.useState<'dest' | 'src'>('dest');\n    const [submit, setSubmit] = React.useState(false);\n\n    const getAccountById = React.useCallback((id: string) => {\n        return accounts[id];\n    }, [accounts]);\n\n    const {\n        data,\n        isError,\n        isSuccess,\n        refetch\n    } = useApiHook({\n        amount: sourceAmount || destAmount || 1,\n        from: getAccountById(sourceAcc)?.currency || 'USD',\n        to: getAccountById(destAcc)?.currency || 'USD',\n    }, {\n        skip: !sourceAcc || !destAcc,\n        pollingInterval: 10000\n    });\n\n    const onSourceAmountChange = (value: string) => {\n        setSourceAmount(value);\n        if (!value) {\n            setDestAmount('');\n        }\n        if (destAcc) {\n            setliveUpdateField('dest');\n        }\n    }\n    const onDestAmountChange = (value: string) => {\n        setDestAmount(value);\n        if (!value) {\n            setSourceAmount('');\n        }\n        if (sourceAcc) {\n            setliveUpdateField('src');\n        }\n    }\n\n    const onSubmit = () => {\n        refetch();\n        setSubmit(true);\n    }\n\n    const onExhange = () => {\n        if (submit && isSuccess) {\n            dispatch(makeTransaction({\n                source: {\n                    id: sourceAcc,\n                    amount: Number(sourceAmount)\n                },\n                destination: {\n                    id: destAcc,\n                    amount: Number(destAmount)\n                }\n            }));\n            setSourceAmount('');\n            setDestAmount('');\n            setSubmit(false);\n        }\n    };\n\n    const toggleLiveUpdateField = () => {\n        const precondition = sourceAcc && destAcc;\n        if (precondition && sourceAmount && !destAmount) {\n            setliveUpdateField('dest');\n        } else if (precondition && destAmount && !sourceAmount) {\n            setliveUpdateField('src');\n        }\n    };\n\n\n\n    const updateDependantField = () => {\n        if (liveUpdateField === 'src' && destAmount) {\n            const newVal = !!data?.rate && (+destAmount / data.rate);\n            setSourceAmount(newVal ? `${newVal}` : '');\n        } else if (liveUpdateField === 'dest' && sourceAmount) {\n            setDestAmount(data?.amount ? `${data.amount}` : '');\n        }\n    };\n\n    React.useEffect(toggleLiveUpdateField, [sourceAcc, destAcc, destAmount, sourceAmount, liveUpdateField]);\n    React.useEffect(updateDependantField, [liveUpdateField, data, sourceAmount, destAmount]);\n    React.useEffect(onExhange, [submit, data, sourceAcc, sourceAmount, destAcc, destAmount, dispatch, isSuccess]);\n\n    const outOfBound = sourceAcc && (+sourceAmount > getAccountById(sourceAcc)?.balance);\n    const isValid = [sourceAcc, destAcc, sourceAmount, destAmount, !outOfBound, sourceAcc !== destAcc, !isError].every(item => !!item);\n\n    return {\n        sourceAcc,\n        sourceAmount,\n        destAcc,\n        destAmount,\n        setSourceAcc,\n        setDestAcc,\n        setSrcAmount: onSourceAmountChange,\n        setDestAmount: onDestAmountChange,\n        isValid,\n        onSubmit,\n        exchangeRate: isSuccess && data?.rate,\n        data\n    };\n};\n\nexport default useConversionForm;\n","import { updateAccountBalance, setAccounts } from '../../reducers/accounts';\n\nimport mockAccountsData from '../../mockData/accounts';\n\nimport type { Dispatch } from '@reduxjs/toolkit';\nimport type { TGetState, TTransactionPayload } from './types';\n\n\nexport const getAccounts = () => {\n    return async (dispatch: Dispatch) => {\n        // Let's assume the accounts data is fetched here and the posible errors are handled and covered already.\n        // The data could also be passed to a widget as a prop directly, as an alternative.\n        dispatch(setAccounts(mockAccountsData));\n    };\n};\n\n// Would normally use here some API to transfer money, but as I mock the data, I 'make' this transaction internally.\nexport const makeTransaction = ({ source, destination }: TTransactionPayload) => {\n    return async (dispatch: Dispatch, getState: TGetState) => {\n        const { accounts: state } = getState();\n        const sourceAccount = state.accounts[source.id];\n        const destAccount = state.accounts[destination.id];\n\n        if (!sourceAccount || !destAccount) {\n            // Could show any toaster here integrated to the 'main app' where the widget is supposed to be located.\n            console.error('Accounts: wrong id passed either to destionation or source! (accounts.ts:34)');\n            return;\n        }\n\n        if (sourceAccount.balance < source.amount) {\n            // I took the UI validation approach here, this is the second blocker.\n            console.error('Accounts: the amount of the transaction is bigger than the source account balance (accounts.ts:39)');\n            return;\n        }\n\n        const newSourceAmount = sourceAccount.balance - source.amount;\n        const newDestAmount = destAccount.balance + destination.amount;\n        dispatch(updateAccountBalance({ id: sourceAccount.id, newBalance: +newSourceAmount.toFixed(2) }));\n        dispatch(updateAccountBalance({ id: destAccount.id, newBalance: +newDestAmount.toFixed(2) }));\n    };\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getAccounts } from '../../actions/accounts';\nimport { useAppDispatch } from '../../store';\n\nimport type { TRootState } from '../../store';\n\nconst acccountSelector = (state: TRootState) => state.accounts;\n\nconst useAccounts = () => {\n    const state = useSelector(acccountSelector);\n    const dispatch = useAppDispatch();\n\n    React.useEffect(() => {\n        dispatch(getAccounts());\n    }, [dispatch]);\n\n    const accounts = React.useMemo(() => {\n        return Object.values(state.accounts);\n    }, [state]);\n\n    const getAccountById = React.useCallback((id: string) => {\n        return state.accounts[id];\n    }, [state]);\n\n    return {\n        state: state.accounts,\n        list: accounts,\n        getById: getAccountById\n    }\n};\n\nexport default useAccounts;\n","import React from 'react';\n\nimport ConverterLayout from './Layout';\nimport useConversionForm from '../../hooks/useConversionForm';\nimport useAccounts from '../../hooks/useAccounts';\n\nimport { useGetConversionRatesQuery } from '../../api';\n\nimport type { TAccountSelectOnChangeProps } from '../../components/AccountSelect/types';\nimport type { TCurrencyInputOnChangeProp } from '../../components/CurrencyInput/types';\n\n\nconst Converter = React.memo(() => {\n    const [showSuccessToast, setShowSuccessToast] = React.useState(false);\n    const {\n        state,\n        list,\n        getById\n    } = useAccounts();\n\n    const {\n        sourceAcc,\n        sourceAmount,\n        destAcc,\n        destAmount,\n        setSourceAcc,\n        setDestAcc,\n        setSrcAmount,\n        setDestAmount,\n        isValid,\n        exchangeRate,\n        onSubmit\n    } = useConversionForm({ accounts: state, useApiHook: useGetConversionRatesQuery });\n\n    const onSourceAccChange = (event: TAccountSelectOnChangeProps) => {\n        setSourceAcc(event.target.value);\n    };\n\n    const onDestAccChange = (event: TAccountSelectOnChangeProps) => {\n        setDestAcc(event.target.value);\n    };\n\n    const onSourceAmountChange = (event: TCurrencyInputOnChangeProp) => {\n        setSrcAmount(event.value ? String(event.value) : '');\n    };\n\n    const onDestAmountChange = (event: TCurrencyInputOnChangeProp) => {\n        setDestAmount(event.value ? String(event.value) : '');\n    };\n\n    const onExchange = () => {\n        onSubmit();\n        setShowSuccessToast(true);\n    };\n\n    const hideToast = React.useCallback(() => {\n        setShowSuccessToast(false)\n    }, []);\n\n    return (\n        <ConverterLayout\n            accounts={list}\n            isValid={isValid}\n            showToast={showSuccessToast}\n            onToastClose={hideToast}\n            onSumbit={onExchange}\n            exchangeRate={exchangeRate}\n            src={{\n                accountId: sourceAcc,\n                currency: getById(sourceAcc)?.currency,\n                amount: sourceAmount,\n                balance: getById(sourceAcc)?.balance,\n                onAccountChange: onSourceAccChange,\n                onValChange: onSourceAmountChange\n            }}\n            dest={{\n                accountId: destAcc,\n                currency: getById(destAcc)?.currency,\n                amount: destAmount,\n                onAccountChange: onDestAccChange,\n                onValChange: onDestAmountChange\n            }}\n        />\n    );\n});\n\nexport default Converter;\n","import React from 'react';\nimport './App.css';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { Theme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Converter from './containers/Converter';\n\nimport { createTheme } from './theme';\n\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme: Theme = React.useMemo(\n    () => {\n      return createTheme(prefersDarkMode);\n    },\n    [prefersDarkMode]\n  );\n\n\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline>\n          <div\n            data-testid=\"app-test-id\"\n            className=\"App\"\n            style={{ backgroundColor: theme.palette.background.default }}\n          >\n            <Converter />\n          </div>\n        </CssBaseline>\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport orange from '@material-ui/core/colors/orange';\n\nexport const createTheme = (prefersDarkMode: boolean) => {\n    return createMuiTheme({\n        palette: {\n            type: prefersDarkMode ? 'dark' : 'light',\n            primary: {\n                main: orange[400]\n            }\n        },\n        overrides: {\n            MuiOutlinedInput: {\n                root: {\n                    \"&:hover $notchedOutline\": {\n                        borderColor: orange[400]\n                    }\n                }\n            },\n            MuiSelect: {\n                select: {\n                    '&:focus': {\n                        backgroundColor: 'transparent'\n                    }\n                }\n            }\n        }\n    })\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}