{"version":3,"sources":["constants/index.ts","api/index.ts","reducers/accounts.ts","reducers/index.ts","store/index.ts","utils/currencies.ts","components/AccountSelect/index.tsx","components/CurrencyInput/index.tsx","components/TopToast/styles.ts","components/TopToast/index.tsx","components/Card/styles.ts","components/Card/index.tsx","components/Button/styles.ts","components/Button/index.tsx","containers/Converter/Layout/styles.ts","containers/Converter/Layout/index.tsx","mockData/accounts.ts","hooks/useConversionForm/index.ts","actions/accounts/index.ts","hooks/useAccounts/index.ts","containers/Converter/index.tsx","App.tsx","theme/index.ts","reportWebVitals.ts","index.tsx"],"names":["DEFAULT_CURRENCY","conversionApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getConversionRates","query","amount","from","to","transformResponse","response","rate","info","result","useGetConversionRatesQuery","accountsSlice","createSlice","name","initialState","accounts","reducers","updateAccountBalance","state","action","payload","id","balance","newBalance","setAccounts","forEach","acc","removeAccount","clearAccounts","actions","rootReducer","combineReducers","reducer","store","configureStore","middleware","getDefaultMiddleware","concat","useAppDispatch","useDispatch","stripNonDigits","string","replace","getProperlyRounded","value","precision","newVal","coef","Math","round","Number","toFixed","getCurrencySymbol","currency","Intl","NumberFormat","style","format","toCurrencyString","reservedVal","String","hasDot","includes","fractional","split","precisionLength","length","converted","parsed","parseFloat","isNaN","maximumFractionDigits","minimumFractionDigits","getLocalString","postfix","AccountSelect","React","memo","label","props","TextField","variant","select","map","account","accountBalance","toString","accountLabel","MenuItem","CurrencyInput","onChange","className","useState","inputVal","setInputVal","isFocused","setIsFocused","onFocus","useCallback","useEffect","rounded","reservedValue","onBlur","withPrecision","FormControl","placeholder","event","eventValue","target","digits","inputProps","textAlign","InputLabelProps","shrink","InputProps","startAdornment","InputAdornment","data-testid","position","useStyles","makeStyles","root","visibility","width","height","alignItems","justifyContent","top","left","transition","open","TopToast","children","onDelayedClose","delay","classes","timeout","setTimeout","clearTimeout","Alert","theme","createStyles","container","borderRadius","boxShadow","shadows","backgroundColor","palette","background","paper","display","flexDirection","padding","overflow","Card","pink","orange","disabled","grey","color","common","white","MyButton","Button","marginRight","marginTop","row","flex","rateInfo","margin","ConverterLayout","showToast","onToastClose","src","dest","isValid","exchangeRate","onSumbit","outOfBound","severity","accountId","onAccountChange","error","helperText","onValChange","FormHelperText","onClick","useConversionForm","useApiHook","dispatch","sourceAcc","setSourceAcc","destAcc","setDestAcc","sourceAmount","setSourceAmount","destAmount","setDestAmount","liveUpdateField","setliveUpdateField","submit","setSubmit","getAccountById","skip","pollingInterval","data","isError","isSuccess","refetch","precondition","source","destination","getState","a","sourceAccount","destAccount","newSourceAmount","newDestAmount","makeTransaction","every","item","setSrcAmount","onSubmit","acccountSelector","useAccounts","useSelector","mockAccountsData","useMemo","Object","values","list","getById","Converter","showSuccessToast","setShowSuccessToast","hideToast","App","prefersDarkMode","useMediaQuery","createMuiTheme","type","primary","main","overrides","MuiOutlinedInput","borderColor","MuiSelect","createTheme","ThemeProvider","CssBaseline","default","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ff082ba.chunk.js","sourcesContent":["export const API_BASE_URL = 'https://api.exchangerate.host/';\nexport const DEFAULT_CURRENCY = 'USD';\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { API_BASE_URL } from '../constants';\nimport { TRateResponse, TOriginalResponse } from './types';\n\n// Define a service using a base URL and expected endpoints\nexport const conversionApi = createApi({\n  reducerPath: 'conversion',\n  baseQuery: fetchBaseQuery({ baseUrl: API_BASE_URL }),\n  endpoints: (builder) => ({\n    getConversionRates: builder.query({\n      query: ({ amount, from, to }) => `convert?from=${from}&to=${to}&amount=${amount}`,\n      transformResponse: (response: TOriginalResponse): TRateResponse => ({\n        rate: response?.info?.rate,\n        amount: response?.result,\n      }),\n    }),\n  }),\n});\n\n// auto-generated based on the defined endpoints\nexport const { useGetConversionRatesQuery } = conversionApi;\n","/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { TAccount, TAccountsState } from './types';\n\nconst initialState: TAccountsState = {\n  accounts: {},\n};\n\nexport const accountsSlice = createSlice({\n  name: 'acoounts',\n  initialState,\n  reducers: {\n    updateAccountBalance: (state, action: PayloadAction<{ id: TAccount['id'], newBalance: TAccount['balance'] }>) => {\n      state.accounts[action.payload.id].balance = action.payload.newBalance;\n    },\n    setAccounts: (state, action: PayloadAction<Array<TAccount>>) => {\n      action.payload.forEach((acc) => {\n        state.accounts[acc.id] = acc;\n      });\n    },\n    removeAccount: (state, action: PayloadAction<TAccount['id']>) => {\n      delete state.accounts[action.payload];\n    },\n    clearAccounts: (state) => {\n      state.accounts = {};\n    },\n  },\n});\n\nexport const {\n  updateAccountBalance,\n  setAccounts,\n  removeAccount,\n  clearAccounts,\n} = accountsSlice.actions;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { conversionApi } from '../api';\nimport { accountsSlice } from './accounts';\n\nexport const rootReducer = combineReducers({\n  accounts: accountsSlice.reducer,\n  [conversionApi.reducerPath]: conversionApi.reducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\n\nimport { rootReducer } from '../reducers';\nimport { conversionApi } from '../api';\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(conversionApi.middleware),\n});\n\nexport type TStore = typeof store;\nexport type TRootState = ReturnType<typeof store.getState>;\nexport type TAppDispatch = typeof store.dispatch;\nexport const useAppDispatch = (): TAppDispatch => useDispatch<TAppDispatch>();\nexport default store;\n","export type TCurrencyStringConfig = {\n  amount: string | number,\n  precision?: number,\n  currency?: string\n};\n\nexport const getLocalString = ({\n  amount,\n  precision = 2,\n  currency,\n}: TCurrencyStringConfig): string => {\n  const parsed = parseFloat(amount as string);\n\n  if (Number.isNaN(parsed)) {\n    return '';\n  }\n\n  return new Intl.NumberFormat('en-US', {\n    style: currency ? 'currency' : 'decimal',\n    currency,\n    maximumFractionDigits: precision,\n    minimumFractionDigits: precision,\n  }).format(parsed);\n};\n\nexport const stripNonDigits = (string: string): string => string.replace(/[^0-9.]/g, '');\n\nexport const getProperlyRounded = (value: string | number, precision = 2): string => {\n  const newVal = typeof value === 'string' ? stripNonDigits(value) : value;\n  if (!newVal) {\n    return '';\n  }\n  const coef = 10 ** precision;\n  return (Math.round(Number(newVal) * coef) / coef).toFixed(precision);\n};\n\nexport const getCurrencySymbol = (currency: string): string => new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency,\n}).format(1)[0];\n\nexport const toCurrencyString = ({\n  amount,\n  precision = 2,\n  currency,\n}: TCurrencyStringConfig): string => {\n  let reservedVal: string = stripNonDigits(String(amount));\n  if (!reservedVal) {\n    return '';\n  }\n\n  const hasDot = reservedVal.includes('.');\n  const fractional = reservedVal.split('.')[1];\n  let precisionLength = fractional?.length || 0;\n\n  if (fractional && fractional.length > precision) {\n    precisionLength = precision;\n    reservedVal = getProperlyRounded(reservedVal, precision);\n  }\n\n  const converted = getLocalString({\n    amount: reservedVal,\n    precision: precisionLength,\n    currency,\n  });\n\n  const postfix = (hasDot && !fractional) ? '.' : '';\n  return `${converted}${postfix}`;\n};\n","import React from 'react';\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\n\nimport { toCurrencyString } from '../../utils/currencies';\n\nimport type { TAccountSelectProps } from './types';\n\nconst AccountSelect = React.memo(({\n  accounts = [],\n  label,\n  ...props\n}: TAccountSelectProps) => (\n  <TextField\n    {...props}\n    label={label}\n    variant=\"outlined\"\n    select\n  >\n    {\n      accounts.map((account) => {\n        const accountBalance = toCurrencyString({\n          amount: account.balance.toString(),\n          currency: account.currency,\n        });\n        const accountLabel = `${account.name} - ${accountBalance}`;\n        return (\n          <MenuItem key={account.id} value={account.id}>{accountLabel}</MenuItem>\n        );\n      })\n    }\n  </TextField>\n));\n\nexport default AccountSelect;\n","import React, { ChangeEvent } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormControl from '@material-ui/core/FormControl';\n\nimport {\n  toCurrencyString,\n  getCurrencySymbol,\n  stripNonDigits,\n  getProperlyRounded,\n} from '../../utils/currencies';\nimport { DEFAULT_CURRENCY } from '../../constants';\n\nimport type { TCurrencyInputProps } from './types';\n\nconst DEFAULT_VALUE = '';\n\nconst CurrencyInput = React.memo(({\n  label,\n  value,\n  currency = DEFAULT_CURRENCY,\n  onChange,\n  className,\n  precision = 2,\n  ...props\n}: TCurrencyInputProps) => {\n  const [inputVal, setInputVal] = React.useState(DEFAULT_VALUE);\n  const [isFocused, setIsFocused] = React.useState(false);\n\n  const onFocus = React.useCallback(() => setIsFocused(true), []);\n\n  React.useEffect(() => {\n    if (isFocused) {\n      return;\n    }\n    const newVal = String(value) || DEFAULT_VALUE;\n    const rounded = getProperlyRounded(newVal, precision);\n    const reservedValue = toCurrencyString({\n      amount: rounded,\n      precision,\n    });\n    setInputVal(reservedValue);\n  }, [value, precision, isFocused]);\n\n  const internalOnChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value: eventValue } = event.target;\n    const digits = stripNonDigits(eventValue);\n\n    const converted = toCurrencyString({\n      amount: eventValue,\n      precision,\n    });\n    setInputVal(converted);\n    if (onChange) {\n      onChange(getProperlyRounded(digits, precision));\n    }\n  };\n\n  const onBlur = React.useCallback(() => {\n    if (!inputVal) {\n      return;\n    }\n    const withPrecision = getProperlyRounded(inputVal);\n    const converted = toCurrencyString({\n      amount: withPrecision,\n      precision,\n    });\n    setInputVal(converted);\n    setIsFocused(false);\n  }, [inputVal, precision]);\n\n  return (\n    <FormControl className={className} variant=\"outlined\">\n      <TextField\n        {...props}\n        label={label}\n        value={inputVal}\n        placeholder=\"0.00\"\n        onChange={internalOnChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        inputProps={{\n          style: { textAlign: 'right' },\n        }}\n        InputLabelProps={{\n          shrink: true,\n        }}\n        InputProps={{\n          startAdornment: <InputAdornment data-testid=\"currency-sign\" position=\"start\">{getCurrencySymbol(currency)}</InputAdornment>,\n        }}\n        variant=\"outlined\"\n      />\n    </FormControl>\n  );\n});\n\nexport default CurrencyInput;\n","import { makeStyles } from '@material-ui/core';\n\nexport const useStyles = makeStyles({\n  root: {\n    visibility: 'hidden',\n    width: 150,\n    height: 30,\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    top: -100,\n    left: 'calc(50% - 75px)',\n    transition: 'top 0.3s linear',\n  },\n  open: {\n    top: 10,\n    visibility: 'visible',\n  },\n});\n","import React from 'react';\nimport Alert from '@material-ui/lab/Alert';\n\nimport { useStyles } from './styles';\n\nimport type { TTopToastProps } from './types';\n\nconst TopToast = React.memo(({\n  children,\n  open = false,\n  onDelayedClose,\n  delay = 1600,\n  ...props\n}: TTopToastProps) => {\n  const classes = useStyles();\n\n  React.useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>;\n    if (open) {\n      timeout = setTimeout(() => {\n        if (onDelayedClose) {\n          onDelayedClose();\n        }\n      }, delay);\n    }\n    return () => {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n    };\n  }, [open, delay, onDelayedClose]);\n\n  return (\n    <Alert\n      {...props}\n      className={`${classes.root} ${open ? classes.open : ''}`}\n      variant=\"filled\"\n    >\n      {children}\n    </Alert>\n  );\n});\n\nexport default TopToast;\n","import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\n  container: {\n    borderRadius: 20,\n    boxShadow: theme.shadows[1],\n    width: 350,\n    height: 400,\n    backgroundColor: `${theme.palette.background.paper}`,\n    display: 'flex',\n    position: 'relative',\n    flexDirection: 'column',\n    justifyContent: 'space-evenly',\n    alignItems: 'strech',\n    padding: '20px',\n    overflow: 'hidden',\n  },\n}));\n","import React from 'react';\nimport { useStyles } from './styles';\n\nconst Card: React.FunctionComponent<{ children: React.ReactNode }> = React.memo(({\n  children,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.container}>\n      {children}\n    </div>\n  );\n});\n\nexport default Card;\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport pink from '@material-ui/core/colors/pink';\nimport orange from '@material-ui/core/colors/orange';\nimport { grey } from '@material-ui/core/colors';\n\nexport const useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    background: `linear-gradient(45deg, ${pink[300]} 30%, ${orange[300]} 90%)`,\n    borderRadius: 20,\n    height: 40,\n    padding: '0 30px',\n  },\n  disabled: {\n    background: `linear-gradient(45deg, ${grey[700]} 30%, ${grey[500]} 90%)`,\n  },\n  label: {\n    color: theme.palette.common.white,\n  },\n}));\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { useStyles } from './styles';\nimport type { TButtonProps } from './types';\n\nconst MyButton = React.memo(({\n  children,\n  ...props\n}: TButtonProps) => {\n  const classes = useStyles();\n  return (\n    <Button\n      {...props}\n      classes={{\n        root: classes.root,\n        disabled: classes.disabled,\n        label: classes.label,\n      }}\n    >\n      { children}\n    </Button>\n  );\n});\n\nexport default MyButton;\n","import { makeStyles } from '@material-ui/core';\n\nexport const useStyles = makeStyles({\n  marginRight: {\n    marginRight: 20,\n  },\n  select: {\n    marginTop: 30,\n  },\n  row: {\n    marginTop: 30,\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  container: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n  },\n  rateInfo: {\n    margin: 20,\n    textAlign: 'center',\n  },\n});\n","import React from 'react';\n\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nimport AccountSelect from '../../../components/AccountSelect';\nimport CurrencyInput from '../../../components/CurrencyInput';\nimport TopToast from '../../../components/TopToast';\nimport Card from '../../../components/Card';\nimport Button from '../../../components/Button';\n\nimport { useStyles } from './styles';\nimport { getCurrencySymbol } from '../../../utils/currencies';\n\nimport type { TConverterLayoutProps } from './types';\n\nconst ConverterLayout = React.memo(({\n  showToast = false,\n  onToastClose,\n  accounts = [],\n  src,\n  dest,\n  isValid = false,\n  exchangeRate,\n  onSumbit,\n}: TConverterLayoutProps) => {\n  const classes = useStyles();\n\n  const outOfBound = +src.balance < +src.amount;\n  return (\n    <Card>\n      <TopToast\n        severity=\"success\"\n        open={showToast}\n        onDelayedClose={onToastClose}\n      >\n        Done!\n      </TopToast>\n      <div className={classes.container}>\n        <AccountSelect\n          id=\"sourceAcc\"\n          name=\"sourceAcc\"\n          accounts={accounts}\n          value={src.accountId}\n          className={classes.select}\n          label=\"Source Account\"\n          onChange={src.onAccountChange}\n        />\n        <AccountSelect\n          id=\"destAcc\"\n          name=\"destAcc\"\n          value={dest.accountId}\n          accounts={accounts}\n          className={classes.select}\n          label=\"Destination Account\"\n          onChange={dest.onAccountChange}\n        />\n        <div className={classes.row}>\n          <CurrencyInput\n            id=\"srcAmount\"\n            name=\"srcAmount\"\n            error={outOfBound}\n            disabled={!src.accountId}\n            helperText={outOfBound && 'Not enough money'}\n            className={classes.marginRight}\n            currency={src.currency}\n            value={src.amount}\n            onChange={src.onValChange}\n          />\n          <CurrencyInput\n            id=\"destAmount\"\n            name=\"destAmount\"\n            disabled={!dest.accountId}\n            currency={dest.currency}\n            value={dest.amount}\n            onChange={dest.onValChange}\n          />\n        </div>\n      </div>\n      {\n                !outOfBound\n                && !!src.accountId\n                && !!dest.accountId\n                && !!src.currency\n                && !!dest.currency\n                && !!src.amount\n                && !!dest.amount\n                && src.currency !== dest.currency\n                && (\n                <FormHelperText className={classes.rateInfo}>\n                  {!exchangeRate ? 'Loading...' : `Rate: ${getCurrencySymbol(src.currency)}1 = ${getCurrencySymbol(dest.currency)}${exchangeRate}`}\n                </FormHelperText>\n                )\n}\n      <Button\n        disabled={!isValid}\n        onClick={onSumbit}\n      >\n        Exchange\n      </Button>\n    </Card>\n  );\n});\n\nexport default ConverterLayout;\n","import type { TAccount } from '../reducers/types';\n\nconst accounts: TAccount[] = [\n  {\n    id: 'account-1',\n    name: 'Dollars Account',\n    currency: 'USD',\n    balance: 30000,\n  },\n  {\n    id: 'account-2',\n    name: 'Euros Account',\n    currency: 'EUR',\n    balance: 25000,\n  },\n  {\n    id: 'account-3',\n    name: 'Pounds Account',\n    currency: 'GBP',\n    balance: 13000,\n  },\n];\n\nexport default accounts;\n","import React from 'react';\nimport { useAppDispatch } from '../../store';\nimport { useGetConversionRatesQuery } from '../../api';\nimport { makeTransaction } from '../../actions/accounts';\n\nimport type { TAccountsState } from '../../reducers/types';\nimport type { TUseConversionFormReturn, TLiveField } from './types';\nimport { DEFAULT_CURRENCY } from '../../constants';\n\nconst useConversionForm = ({\n  accounts,\n  useApiHook,\n}: {\n  accounts: TAccountsState['accounts'],\n  useApiHook: typeof useGetConversionRatesQuery\n}): TUseConversionFormReturn => {\n  const dispatch = useAppDispatch();\n  const [sourceAcc, setSourceAcc] = React.useState('');\n  const [destAcc, setDestAcc] = React.useState('');\n  const [sourceAmount, setSourceAmount] = React.useState<string>('');\n  const [destAmount, setDestAmount] = React.useState<string>('');\n  const [liveUpdateField, setliveUpdateField] = React.useState<TLiveField>('dest');\n  const [submit, setSubmit] = React.useState(false);\n\n  const getAccountById = React.useCallback((id: string) => accounts[id], [accounts]);\n\n  const {\n    data,\n    isError,\n    isSuccess,\n    refetch,\n  } = useApiHook({\n    amount: sourceAmount || destAmount || 1,\n    from: getAccountById(sourceAcc)?.currency || DEFAULT_CURRENCY,\n    to: getAccountById(destAcc)?.currency || DEFAULT_CURRENCY,\n  }, {\n    skip: !sourceAcc || !destAcc,\n    pollingInterval: 10000,\n  });\n\n  const onSourceAmountChange = (value: string) => {\n    setSourceAmount(value);\n    if (!value) {\n      setDestAmount('');\n    }\n    if (destAcc) {\n      setliveUpdateField('dest');\n    }\n  };\n\n  const onDestAmountChange = (value: string) => {\n    setDestAmount(value);\n    if (!value) {\n      setSourceAmount('');\n    }\n    if (sourceAcc) {\n      setliveUpdateField('src');\n    }\n  };\n\n  const onSubmit = () => {\n    refetch();\n    setSubmit(true);\n  };\n\n  const onExhange = () => {\n    if (submit && isSuccess) {\n      dispatch(makeTransaction({\n        source: {\n          id: sourceAcc,\n          amount: Number(sourceAmount),\n        },\n        destination: {\n          id: destAcc,\n          amount: Number(destAmount),\n        },\n      }));\n      setSourceAmount('');\n      setDestAmount('');\n      setSubmit(false);\n    }\n  };\n\n  const toggleLiveUpdateField = () => {\n    const precondition = sourceAcc && destAcc;\n    if (precondition && sourceAmount && !destAmount) {\n      setliveUpdateField('dest');\n    } else if (precondition && destAmount && !sourceAmount) {\n      setliveUpdateField('src');\n    }\n  };\n\n  const updateDependantField = () => {\n    if (liveUpdateField === 'src' && destAmount) {\n      const newVal = !!data?.rate && (+destAmount / data.rate);\n      setSourceAmount(newVal ? `${newVal}` : '');\n    } else if (liveUpdateField === 'dest' && sourceAmount) {\n      setDestAmount(data?.amount ? `${data.amount}` : '');\n    }\n  };\n\n  React.useEffect(toggleLiveUpdateField,\n    [sourceAcc, destAcc, destAmount, sourceAmount, liveUpdateField]);\n  React.useEffect(updateDependantField,\n    [liveUpdateField, data, sourceAmount, destAmount, destAcc, sourceAcc]);\n  React.useEffect(onExhange,\n    [submit, data, sourceAcc, sourceAmount, destAcc, destAmount, dispatch, isSuccess]);\n\n  const outOfBound = sourceAcc && (+sourceAmount > getAccountById(sourceAcc)?.balance);\n  const isValid = [\n    sourceAcc,\n    destAcc,\n    sourceAmount,\n    destAmount,\n    !outOfBound,\n    sourceAcc !== destAcc,\n    !isError,\n  ].every((item) => !!item);\n\n  return {\n    sourceAcc,\n    sourceAmount,\n    destAcc,\n    destAmount,\n    setSourceAcc,\n    setDestAcc,\n    setSrcAmount: onSourceAmountChange,\n    setDestAmount: onDestAmountChange,\n    isValid,\n    onSubmit,\n    exchangeRate: isSuccess && data?.rate,\n    data,\n  };\n};\n\nexport default useConversionForm;\n","import { updateAccountBalance, setAccounts } from '../../reducers/accounts';\nimport mockAccountsData from '../../mockData/accounts';\n\nimport type {\n  TGetState,\n  TTransactionPayload,\n  ThunkResult,\n  TThunkDispatch,\n} from './types';\nimport { getProperlyRounded } from '../../utils/currencies';\n\nexport const getAccounts = (): ThunkResult<void> => async (dispatch: TThunkDispatch) => {\n  // Let's assume the accounts data is fetched here and the posible\n  // errors are handled and covered already. The data could also be passed\n  // to a widget as a prop directly, as an alternative.\n  dispatch(setAccounts(mockAccountsData));\n};\n\nexport const makeTransaction = ({\n  source,\n  destination,\n}: TTransactionPayload): ThunkResult<void> => async (\n  dispatch: TThunkDispatch,\n  getState: TGetState,\n) => {\n  const { accounts: state } = getState();\n  const sourceAccount = state.accounts[source.id];\n  const destAccount = state.accounts[destination.id];\n\n  if (!sourceAccount || !destAccount) {\n    return;\n  }\n\n  if (sourceAccount.balance < source.amount) {\n    return;\n  }\n\n  const newSourceAmount = sourceAccount.balance - source.amount;\n  const newDestAmount = destAccount.balance + destination.amount;\n  dispatch(updateAccountBalance({\n    id: sourceAccount.id,\n    newBalance: +getProperlyRounded(newSourceAmount),\n  }));\n  dispatch(updateAccountBalance({\n    id: destAccount.id,\n    newBalance: +getProperlyRounded(newDestAmount),\n  }));\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getAccounts } from '../../actions/accounts';\nimport { useAppDispatch } from '../../store';\n\nimport type { TRootState } from '../../store';\nimport type { TUseAccountsReturn } from './types';\n\nconst acccountSelector = (state: TRootState) => state.accounts;\n\nconst useAccounts = (): TUseAccountsReturn => {\n  const state = useSelector(acccountSelector);\n  const dispatch = useAppDispatch();\n\n  React.useEffect(() => {\n    dispatch(getAccounts());\n  }, [dispatch]);\n\n  const accounts = React.useMemo(() => Object.values(state.accounts), [state]);\n\n  const getAccountById = React.useCallback((id: string) => state.accounts[id], [state]);\n\n  return {\n    state,\n    list: accounts,\n    getById: getAccountById,\n  };\n};\n\nexport default useAccounts;\n","import React from 'react';\n\nimport ConverterLayout from './Layout';\nimport useConversionForm from '../../hooks/useConversionForm';\nimport useAccounts from '../../hooks/useAccounts';\n\nimport { useGetConversionRatesQuery } from '../../api';\n\nimport type { TAccountSelectOnChangeProps } from '../../components/AccountSelect/types';\n\nconst Converter = React.memo(() => {\n  const [showSuccessToast, setShowSuccessToast] = React.useState(false);\n  const {\n    state,\n    list,\n    getById,\n  } = useAccounts();\n\n  const {\n    sourceAcc,\n    sourceAmount,\n    destAcc,\n    destAmount,\n    setSourceAcc,\n    setDestAcc,\n    setSrcAmount,\n    setDestAmount,\n    isValid,\n    exchangeRate,\n    onSubmit,\n  } = useConversionForm({ accounts: state.accounts, useApiHook: useGetConversionRatesQuery });\n\n  const onSourceAccChange = (event: TAccountSelectOnChangeProps) => {\n    setSourceAcc(event.target.value);\n  };\n\n  const onDestAccChange = (event: TAccountSelectOnChangeProps) => {\n    setDestAcc(event.target.value);\n  };\n\n  const onExchange = () => {\n    onSubmit();\n    setShowSuccessToast(true);\n  };\n\n  const hideToast = React.useCallback(() => {\n    setShowSuccessToast(false);\n  }, []);\n\n  return (\n    <ConverterLayout\n      accounts={list}\n      isValid={isValid}\n      showToast={showSuccessToast}\n      onToastClose={hideToast}\n      onSumbit={onExchange}\n      exchangeRate={exchangeRate}\n      src={{\n        accountId: sourceAcc,\n        currency: getById(sourceAcc)?.currency,\n        amount: sourceAmount,\n        balance: getById(sourceAcc)?.balance,\n        onAccountChange: onSourceAccChange,\n        onValChange: setSrcAmount,\n      }}\n      dest={{\n        accountId: destAcc,\n        currency: getById(destAcc)?.currency,\n        amount: destAmount,\n        onAccountChange: onDestAccChange,\n        onValChange: setDestAmount,\n      }}\n    />\n  );\n});\n\nexport default Converter;\n","import React from 'react';\nimport './App.css';\n\nimport { Provider } from 'react-redux';\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { Theme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport store from './store';\n\nimport Converter from './containers/Converter';\n\nimport { createTheme } from './theme';\n\nfunction App(): React.ReactElement {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme: Theme = React.useMemo(\n    () => createTheme(prefersDarkMode),\n    [prefersDarkMode],\n  );\n\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline>\n          <div\n            data-testid=\"app-test-id\"\n            className=\"App\"\n            style={{ backgroundColor: theme.palette.background.default }}\n          >\n            <Converter />\n          </div>\n        </CssBaseline>\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport orange from '@material-ui/core/colors/orange';\n\nimport type { Theme } from '@material-ui/core/styles';\n\nexport const createTheme = (prefersDarkMode: boolean): Theme => createMuiTheme({\n  palette: {\n    type: prefersDarkMode ? 'dark' : 'light',\n    primary: {\n      main: orange[400],\n    },\n  },\n  overrides: {\n    MuiOutlinedInput: {\n      root: {\n        '&:hover $notchedOutline': {\n          borderColor: orange[400],\n        },\n      },\n    },\n    MuiSelect: {\n      select: {\n        '&:focus': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  },\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}